% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/workflow_dag.R
\docType{data}
\name{DAGWorkflow}
\alias{DAGWorkflow}
\title{DAG Workflow Class}
\format{An object of class \code{R6ClassGenerator} of length 25.}
\usage{
DAGWorkflow
}
\description{
Directed Acyclic Graph (DAG) workflow implementation
}
\section{Class Constructor}{

\describe{
    \item{\code{new(name = "")}}{
        \itemize{
            \item{\code{name}: character string that identifies this workflow}
        }
    }
}
}

\section{Public}{

\describe{
    \item{\code{addConnections(connections)}}{
        \itemize{
            \item{Adds a list of connection to a workflow.}
            \item{\bold{\code{connection}}: list of implementation \code{ConnectionInterface} object.}
            \item{\bold{Returns}: \code{NULL}}
        }
    }
    \item{\code{addModules(modules)}}{
        \itemize{
            \item{Adds a list of modules to a workflow.}
            \item{\bold{\code{modules}}: list of implementation \code{ModuleInterface} objects.}
            \item{\bold{Returns}: \code{NULL}}
        }
    }
    \item{\code{errorCheck(executionCheck = FALSE, ...)}}{
        \itemize{
            \item{Runs error checking on the internal state of a workflow.}
            \item{\code{executionCheck}: when set to \code{TRUE}, runs additional checks to determine if ready for execution.}
            \item{\code{...}: character vectors of additional argument names from sources outside of connections, such as an enviroment.}
            \item{\bold{Returns}: \code{NULL}, will raise a fatal error if an error is found}
        }
    }
     \item{\code{getWorkflowInputs()}}{
        \itemize{
            \item{Gets a named logical vector where names are the possible inputs into the workflow and the values indicate if an input is required.}
            \item{\bold{Returns}: logical vector}
        }
    }
     \item{\code{getModuleInputs(module)}}{
        \itemize{
            \item{Gets a named logical vector where the names are the inputs, excluding those provided by connections from upstream modules, into a module and the values indicate if an input is required.}
            \item{\bold{\code{module}}: implementation obj of \code{ModuleInterface} or a character string of a module in a workflow.}
            \item{\bold{Returns}: logical vector}
        }
    }
    \item{\code{getConnections(module1, module2)}}{
        \itemize{
            \item{Gets a list of connections between \code{module1} and \code{module2}.}
            \item{\bold{\code{module1}}: implementation obj of \code{ModuleInterface} or a character string of a module in a workflow. Because this is a directed implementation class, module1 is the head module.}
            \item{\bold{\code{module2}}: implementation obj of \code{ModuleInterface} or a character string of a module in a workflow. Because this is a directed implementation class, module1 is the tail module.}
            \item{\bold{Returns}: vector of character strings}
        }
    }
    \item{\code{getDownstreamModules(module)}}{
        \itemize{
            \item{Gets a list of modules downstream of \code{module}.}
            \item{\bold{\code{module}}: valid implementation \code{ModuleInterface} obj or name of module that is present in a workflow.}
            \item{\bold{Returns}: list of downstream modules}
        }
    }
    \item{\code{getEndingModules()}}{
        \itemize{
            \item{Gets a list of ending modules in a workflow.}
            \item{\bold{Returns}: a list of ending modules}
        }
    }
    \item{\code{getAllModules()}}{
        \itemize{
            \item{gets a list of all modules in a workflow.}
            \item{\bold{Returns}: a list of all modules}
        }
    }
    \item{\code{getName()}}{
        \itemize{
            \item{Gets the name of a workflow.}
            \item{\bold{Returns}: character string}
        }
    }
    \item{\code{getSaveInfo()}}{
        \itemize{
            \item{DOES NOT APPLY TO WORKFLOWS.}
            \item{\bold{Returns}: \code{NULL}}
        }
    }
    \item{\code{getStartingModules()}}{
        \itemize{
            \item{Gets a list of starting modules in a workflow.}
            \item{\bold{Returns}: a list of starting modules}
        }
    }
    \item{\code{getUpstreamModules(module)}}{
        \itemize{
            \item{Gets a list of modules upstream of \code{module}.}
            \item{\bold{\code{module}}: valid implementation \code{ModuleInterface} obj or name of module that is present in a workflow.}
            \item{\bold{Returns}: list of downstream modules}
        }
    }
    \item{\code{removeConnection(connection)}}{
        \itemize{
            \item{Removes a connection from a workflow.}
            \item{\bold{\code{connection}}: implementation object of \code{ConnectionInterface}, or a character vector of connection names}
            \item{\bold{Returns}: \code{NULL}}
        }
    }
    \item{\code{removeModule(module)}}{
        \itemize{
            \item{Removes a modules from a workflow. Also, removes associated connections with \code{module}.}
            \item{\bold{\code{module}}: implementation object of \code{ModuleInterface}, or a character vector of module names}
            \item{\bold{Returns}: \code{NULL}}
        }
    }
    \item{\code{save(filename)}}{
        \itemize{
            \item{Saves a workflow onto disk at \code{filename}.}
            \item{\bold{\code{filename}}: location to store file}
            \item{\bold{Returns}: \code{NULL}}
        }
    }
    \item{\code{visualize()}}{
        \itemize{
            \item{Visualizes a workflow.}
            \item{\bold{Returns}: NULL. Output will be on a plot, etc.}
        }
    }
}
}

\section{Private}{

\describe{
    \item{\code{connections}}{
        \itemize{
            \item{Stores a workflow's connections.}
        }
    }
    \item{\code{graph}}{
        \itemize{
            \item{Stores a workflow's internal graph representation.}
        }
    }
    \item{\code{modules}}{
        \itemize{
            \item{Stores a workflow's modules.}
        }
    }
    \item{\code{name}}{
        \itemize{
            \item{Stores a workflow's name.}
        }
    }
    \item{\code{getNeighbors(graph, module, direction)}}{
        \itemize{
            \item{Gets a list of the neighbor modules of \code{module} in \code{graph}.}
            \item{\bold{\code{graph}}: valid igraph object.}
            \item{\bold{\code{module}}: module obj or module name.}
            \item{\bold{\code{direction}}}: "in" for upstream neighbors or "out" for downstream neighbors.
            \item{\bold{Returns}: a list of neighbor modules.}
        }
    }
    \item{\code{getRevertState()}}{
        \itemize{
            \item{Gets a list of data that can be used with the \code{revert} method to revert a workflow to the state outputted from this method.}
            \item{\bold{Returns}: a list that contains revert state data.}
        }
    }
    \item{\code{revert(previousState)}}{
        \itemize{
            \item{Returns a workflow to the state stored in \code{previousState}.}
            \item{\bold{Returns}: \code{NULL}.}
        }
    }
}
}

\section{Static Class Methods}{

\describe{
    \item{\link[updraft]{DAGWorkflow-cash-initFromFile}}{}
}
}

\keyword{datasets}
